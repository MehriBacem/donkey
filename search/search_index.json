{
    "docs": [
        {
            "location": "/", 
            "text": "About Donkey\n\n\nDonkey is a high level self driving library written in Python. It was \ndeveloped with a focus on enabling fast experimentation and easy contribution.\n\n\n\n\nBuild your own Donkey2\n\n\nDonkey2 is the standard car that most people build first. The parts cost $200\nand take 2 hours to assemble. Here are the main steps to build your own car: \n\n\n\n\nAssemble hardware.\n.\n\n\nInstall software.\n\n\nCalibrate your car.\n\n\nStart driving.\n \n\n\nTrain an autopilot.\n \n\n\nExperiment with simulator.\n \n\n\n\n\n\n\nHello World.\n\n\nDonkeycar is designed to make adding new parts to your car easy. Here's and \nexample car application that captures images from the camera and saves them.\n\n\nimport donkey as dk\n\n#initialize the vehicle\nV = dk.Vehicle()\n\n#add a camera part\ncam = dk.parts.PiCamera()\nV.add(cam, outputs=['image'], threaded=True)\n\n#add tub part to record images\ntub = dk.parts.Tub(path='~/d2/gettings_started', \n                   inputs=['image'], \n                   types=['image_array'])\nV.add(tub, inputs=inputs)\n\n#start the vehicle's drive loop\nV.start(max_loop_count=100)\n\n\n\n\n\n\nInstallation\n\n\nFor linux/OS users clone the master branch to get the lastest version.\n\n\ngit clone https://github.com/wroscoe/donkey donkeycar\npip install -e donkeycar\n\n\n\n\nHow to install on Windows\n\n\n\n\nWhy the name Donkey?\n\n\nThe ultimate goal of this project is to build something useful. Donkey's were\none of the first domesticated pack animals, they're notoriously stubborn, and \nthey are kid safe. Until the car can nagigate from one side of a city to the \nother, we'll hold off naming it after some celestial being.", 
            "title": "Home"
        }, 
        {
            "location": "/#about-donkey", 
            "text": "Donkey is a high level self driving library written in Python. It was \ndeveloped with a focus on enabling fast experimentation and easy contribution.", 
            "title": "About Donkey"
        }, 
        {
            "location": "/#build-your-own-donkey2", 
            "text": "Donkey2 is the standard car that most people build first. The parts cost $200\nand take 2 hours to assemble. Here are the main steps to build your own car:    Assemble hardware. .  Install software.  Calibrate your car.  Start driving.    Train an autopilot.    Experiment with simulator.", 
            "title": "Build your own Donkey2"
        }, 
        {
            "location": "/#hello-world", 
            "text": "Donkeycar is designed to make adding new parts to your car easy. Here's and \nexample car application that captures images from the camera and saves them.  import donkey as dk\n\n#initialize the vehicle\nV = dk.Vehicle()\n\n#add a camera part\ncam = dk.parts.PiCamera()\nV.add(cam, outputs=['image'], threaded=True)\n\n#add tub part to record images\ntub = dk.parts.Tub(path='~/d2/gettings_started', \n                   inputs=['image'], \n                   types=['image_array'])\nV.add(tub, inputs=inputs)\n\n#start the vehicle's drive loop\nV.start(max_loop_count=100)", 
            "title": "Hello World."
        }, 
        {
            "location": "/#installation", 
            "text": "For linux/OS users clone the master branch to get the lastest version.  git clone https://github.com/wroscoe/donkey donkeycar\npip install -e donkeycar  How to install on Windows", 
            "title": "Installation"
        }, 
        {
            "location": "/#why-the-name-donkey", 
            "text": "The ultimate goal of this project is to build something useful. Donkey's were\none of the first domesticated pack animals, they're notoriously stubborn, and \nthey are kid safe. Until the car can nagigate from one side of a city to the \nother, we'll hold off naming it after some celestial being.", 
            "title": "Why the name Donkey?"
        }, 
        {
            "location": "/guide/build_hardware/", 
            "text": "Instructions to build a Donkey2 Car\n\n\nThe standard hardware build instructions can be found in this \n\ngoogle doc\n.\n\n\nOnce you have the car built follow the \nsoftware instructions\n.", 
            "title": "Build a car."
        }, 
        {
            "location": "/guide/build_hardware/#instructions-to-build-a-donkey2-car", 
            "text": "The standard hardware build instructions can be found in this  google doc .  Once you have the car built follow the  software instructions .", 
            "title": "Instructions to build a Donkey2 Car"
        }, 
        {
            "location": "/guide/install_software/", 
            "text": "Install Software\n\n\nThis guide will help you to setup the software to run Donkey on your Raspberry Pi, as well as the host PC operating system of your choice.\n\n\n\n\nSetup \nRaspberryPi\n\n\nSetup \nLinux Host PC\n\n\nSetup \nWindows Host PC\n\n\nSetup \nMac Host PC\n\n\n\n\n\n\nGet the Raspberry Pi working.\n\n\nBefore we can do anything we have to get our car's computer connected to the \ninternet. The fastest way is to use the disk image created for donkey cars. \n\n\nThe method for using a disk image to create a bootable SD card varies between\noperating systems. These instructions are for Ubuntu but you can see more \ninstructions \nhere\n.\n\n\n\n\nDownload \nzipped disk image\n (1.1GB). \n\n\nUnzip the disk image.\n\n\nPlug your SD card into your computer.\n\n\nOpen the \"Startup Disk Creator\" application.\n\n\nSelect your source disk image as the one you unzipped earlier.\n\n\nSelect your SD card as the disk to use. \n\n\nClick \"Make startup disk\".\n\n\n\n\nSetup the Pi's WiFi for first boot\n\n\nWe can create a special file which will be used to login to wifi on first boot. More reading \nhere\n, but we will walk you through it. \n\n\nOn Windows, with your memory card image burned and memory disc still inserted, you should see two drives, which are actually two partitions on the mem disc. One is labeled \nboot\n. On Mac and Linux, you should also have access to the \nboot\n partition of the mem disc. This is formated with the common FAT type and is where we will edit some files to help it find and log-on to your wifi on it's first boot.\n\n\n\n\nStart a text editor: \ngedit\n on Linux. Notepad on Windows. TextEdit on a Mac.\n\n\nPaste and edit this contents to match your wifi:\n\n\n\n\ncountry=US\nctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\nupdate_config=1\n\nnetwork={\n    ssid=\nyour network name\n\n    psk=\nyour password\n\n}\n\n\n\n\n\nReplace \nyour network name\n with the ID of your network. Leave the quotes. I've seen problems when the network name contained an apostrophe, like \"Joe's iPhone\".\nReplace \nyour password\n with your password, leaving it surrounded by quotes. \nIf it bothers you to leave your password unencrypted, you may change the \ncontents later\n once you've gotten the pi to boot and log-in.\n\n\n\n\nSave this file to the root of \nboot\n partition with the filename \nwpa_supplicant.conf\n. On first boot, this file will be moved to \n/etc/wpa_supplicant/wpa_supplicant.conf\n where it may be edited later.\n\n\n\n\nSetup Pi's Hostname\n\n\nWe can also setup the hostname so that your Pi easier to find once on the network. If yours is the only Pi on the network, then you can find it with \n\n\nping raspberrypi.local\n\n\n\n\nonce it's booted. If there are many other Pi's on the network, then this will have problems. If you are on a Linux machine, or are able to edit the UUID partition, then you can edit the \n/etc/hostname\n and \n/etc/hosts\n files now to make finding your pi on the network easier after boot. Edit those to replace \nraspberrypi\n with a name of your choosing. Use all lower case, no special characters, no hyphens, yes underscores \n_\n. \n\n\nsudo vi /media/userID/UUID/etc/hostname\nsudo vi /media/userID/UUID/etc/hosts\n\n\n\n\nNow you're SD card is ready. Eject it from your computer, put it in the Pi \nand plug in the Pi.\n\n\nConnecting to the Pi\n\n\nIf you followed the above instructions to add wifi access you're Pi should\nnow be connected to your wifi network. Now you need to find it's IP address\nso you can connect to it via SSH. \n\n\nThe easiest way (on Ubuntu) is to use the \nfindcar\n donkey command. You can try \nping raspberrypi.local\n. If you've modified the hostname, then you should try: \nping \nyour hostname\n.local\n. This will fail on a windows machine. Windows users will need the full IP address (unless using cygwin). \n\n\nIf you are having troubles locating your Pi on the network, you will want to plug in an HDMI monitor and USB keyboard into the Pi. Boot it. Login with:\n\n\n\n\nUsername: \npi\n\n\nPassword: \nraspberry\n\n\nThe new disk image has the password \nasdfasdf\n\n\n\n\nThen try the command:\n\n\nifconfig wlan0\n\n\n\n\nIf this has a valid IPv4 address, 4 groups of numbers separated by dots, then you can try that with your SSH command. If you don't see anything like that, then your wifi config might have a mistake. You can try to fix with\n\n\nsudo nano /etc/wpa_supplicant/wpa_supplicant.conf\n\n\n\n\nIf you don't have a HDMI monitor and keyboard, you can plug-in the Pi with a CAT5 cable to a router with DHCP. If that router is on the same network as your PC, you can try:\n\n\nping raspberrypi.local\n\n\n\n\nHopefully, one of those methods worked and you are now ready to SSH into your Pi. On Mac and Linux, you can open Terminal. On Windows you can install \nPutty\n or \none of the alternatives\n.\n\n\nIf you have a command prompt, you can try:\n\n\nssh pi@raspberrypi.local\n\n\n\n\nor\n\n\nssh pi@\nyour pi ip address\n\n\n\n\n\nor via Putty:\n\n Username: \npi\n\n\n Password: \nraspberry\n\n  * \nasdfasdf\n on the prebuilt image\n* Hostname:\nyour pi IP address\n\n\nIf you are using the prebuilt image specified above, then your Pi is ready to go. You should see a d2 and donkey directory. \n\n\n\n\nNote: Check config.py to make sure it uses the correct settings for the PWM channel for steering and throttle. Open config.py \nnano ~/d2/config.py\n and make sure that you see the lines:\n\n\n\n\nSTEERING_CHANNEL = 1\n\n\nTHROTTLE_CHANNEL = 0\n\n\n\n\nThe 1 and 0 for the parts arguments should match whichever channel you used to plug your servo/ESC leads in to your 9685 board. Usually this ranges from 0-15 and it numbered on the board.\n\n\n\n\nUpdate Donkeycar Python code and install\n\n\nThe donkeycar Python code on the memory card image is likely older than the that on the Github repo, so update things once you have the Pi running.\n\n\ncd ~/donkeycar\ngit pull\npip install -e .\n\n\n\n\n\n\nNow let's setup things on your PC. Install varies depending on platform.\n\n\nInstall donkeycar on Linux\n\n\nInstall dependencies, setup virtualenv\n\n\nsudo apt-get install virtualenv build-essential python3-dev gfortran libhdf5-dev\nvirtualenv env -p python3\nsource env/bin/activate\npip install keras==2.0.6\npip install tensorflow==1.3.0\n\n\n\n\nInstall donkeycar\n\n\ngit clone https://github.com/wroscoe/donkey donkeycar\npip install -e donkeycar\n\n\n\n\n\n\nInstall donkeycar on Windows\n\n\n\n\n\n\nInstall \nminiconda Python 3.6 64 bit\n. Be sure to check the box to allow it to modify your system path variable to add conda.\n\n\n\n\n\n\nInstall \ngit 64 bit\n\n\n\n\n\n\nFrom the start menu start the Anaconda Prompt.\n\n\n\n\n\n\nChange to a dir you would like to use as the head of your projects.\n\n\n\n\n\n\nmkdir projects\ncd projects\n\n\n\n\n\n\nGet the latest donkey from Github.\n\n\n\n\ngit clone https://github.com/wroscoe/donkey\ncd donkey\n\n\n\n\n\n\nCreate the Python Anaconda environment\n\n\n\n\nconda env create -f envs\\windows.yml\nactivate donkey\n\n\n\n\n\n\nInstall donkey source and create your local working dir:\n\n\n\n\npip install -e .\ndonkey createcar --path ~/d2\n\n\n\n\n\n\nNote: After closing the Anaconda Prompt, when you open it again, you will need to \ntype \nactivate donkey\n to re-enable the mappings to donkey specific \nPython libraries\n\n\n\n\n\n\nInstall donkeycar on Mac\n\n\n\n\n\n\nInstall \nminiconda Python 3.6 64 bit\n\n\n\n\n\n\nInstall \ngit 64 bit\n\n\n\n\n\n\nStart Terminal\n\n\n\n\n\n\nChange to a dir you would like to use as the head of your projects.\n\n\n\n\n\n\nmkdir projects\ncd projects\n\n\n\n\n\n\nGet the latest donkey from Github.\n\n\n\n\ngit clone https://github.com/wroscoe/donkey\ncd donkey\n\n\n\n\n\n\nCreate the Python anaconda environment\n\n\n\n\nconda env create -f envs/mac.yml\nsource activate donkey\n\n\n\n\n\n\nInstall Tensorflow\n\n\n\n\npip install https://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-1.3.0-py3-none-any.whl\n\n\n\n\n\n\nInstall donkey source and create your local working dir:\n\n\n\n\npip install -e .\ndonkey createcar --path ~/d2\n\n\n\n\n\n\nNote: After closing the Terminal, when you open it again, you will need to \ntype \nsource activate donkey\n to re-enable the mappings to donkey specific \nPython libraries\n\n\n\n\n\n\nInstall another fork of donkeycar\n\n\nOccasionally you may want to run with changes from a separate fork of donkey. You may uninstall one and install another. That's fastest, but leaves you with only the forked version installed:\n\n\npip uninstall donkeycar\ngit clone --depth=1 https://github.com/\nusername\n/donkey donkey_\nusername\n\ncd donkey_\nusername\n\npip install -e .\n\n\n\n\nTo get back to the stock donkey install:\n\n\npip uninstall donkeycar\ngit clone --depth=1 https://github.com/wroscoe/donkey donkey\ncd donkey\npip install -e .", 
            "title": "Install the software."
        }, 
        {
            "location": "/guide/install_software/#install-software", 
            "text": "This guide will help you to setup the software to run Donkey on your Raspberry Pi, as well as the host PC operating system of your choice.   Setup  RaspberryPi  Setup  Linux Host PC  Setup  Windows Host PC  Setup  Mac Host PC", 
            "title": "Install Software"
        }, 
        {
            "location": "/guide/install_software/#get-the-raspberry-pi-working", 
            "text": "Before we can do anything we have to get our car's computer connected to the \ninternet. The fastest way is to use the disk image created for donkey cars.   The method for using a disk image to create a bootable SD card varies between\noperating systems. These instructions are for Ubuntu but you can see more \ninstructions  here .   Download  zipped disk image  (1.1GB).   Unzip the disk image.  Plug your SD card into your computer.  Open the \"Startup Disk Creator\" application.  Select your source disk image as the one you unzipped earlier.  Select your SD card as the disk to use.   Click \"Make startup disk\".", 
            "title": "Get the Raspberry Pi working."
        }, 
        {
            "location": "/guide/install_software/#setup-the-pis-wifi-for-first-boot", 
            "text": "We can create a special file which will be used to login to wifi on first boot. More reading  here , but we will walk you through it.   On Windows, with your memory card image burned and memory disc still inserted, you should see two drives, which are actually two partitions on the mem disc. One is labeled  boot . On Mac and Linux, you should also have access to the  boot  partition of the mem disc. This is formated with the common FAT type and is where we will edit some files to help it find and log-on to your wifi on it's first boot.   Start a text editor:  gedit  on Linux. Notepad on Windows. TextEdit on a Mac.  Paste and edit this contents to match your wifi:   country=US\nctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\nupdate_config=1\n\nnetwork={\n    ssid= your network name \n    psk= your password \n}  Replace  your network name  with the ID of your network. Leave the quotes. I've seen problems when the network name contained an apostrophe, like \"Joe's iPhone\".\nReplace  your password  with your password, leaving it surrounded by quotes. \nIf it bothers you to leave your password unencrypted, you may change the  contents later  once you've gotten the pi to boot and log-in.   Save this file to the root of  boot  partition with the filename  wpa_supplicant.conf . On first boot, this file will be moved to  /etc/wpa_supplicant/wpa_supplicant.conf  where it may be edited later.", 
            "title": "Setup the Pi's WiFi for first boot"
        }, 
        {
            "location": "/guide/install_software/#setup-pis-hostname", 
            "text": "We can also setup the hostname so that your Pi easier to find once on the network. If yours is the only Pi on the network, then you can find it with   ping raspberrypi.local  once it's booted. If there are many other Pi's on the network, then this will have problems. If you are on a Linux machine, or are able to edit the UUID partition, then you can edit the  /etc/hostname  and  /etc/hosts  files now to make finding your pi on the network easier after boot. Edit those to replace  raspberrypi  with a name of your choosing. Use all lower case, no special characters, no hyphens, yes underscores  _ .   sudo vi /media/userID/UUID/etc/hostname\nsudo vi /media/userID/UUID/etc/hosts  Now you're SD card is ready. Eject it from your computer, put it in the Pi \nand plug in the Pi.", 
            "title": "Setup Pi's Hostname"
        }, 
        {
            "location": "/guide/install_software/#connecting-to-the-pi", 
            "text": "If you followed the above instructions to add wifi access you're Pi should\nnow be connected to your wifi network. Now you need to find it's IP address\nso you can connect to it via SSH.   The easiest way (on Ubuntu) is to use the  findcar  donkey command. You can try  ping raspberrypi.local . If you've modified the hostname, then you should try:  ping  your hostname .local . This will fail on a windows machine. Windows users will need the full IP address (unless using cygwin).   If you are having troubles locating your Pi on the network, you will want to plug in an HDMI monitor and USB keyboard into the Pi. Boot it. Login with:   Username:  pi  Password:  raspberry  The new disk image has the password  asdfasdf   Then try the command:  ifconfig wlan0  If this has a valid IPv4 address, 4 groups of numbers separated by dots, then you can try that with your SSH command. If you don't see anything like that, then your wifi config might have a mistake. You can try to fix with  sudo nano /etc/wpa_supplicant/wpa_supplicant.conf  If you don't have a HDMI monitor and keyboard, you can plug-in the Pi with a CAT5 cable to a router with DHCP. If that router is on the same network as your PC, you can try:  ping raspberrypi.local  Hopefully, one of those methods worked and you are now ready to SSH into your Pi. On Mac and Linux, you can open Terminal. On Windows you can install  Putty  or  one of the alternatives .  If you have a command prompt, you can try:  ssh pi@raspberrypi.local  or  ssh pi@ your pi ip address   or via Putty:  Username:  pi   Password:  raspberry \n  *  asdfasdf  on the prebuilt image\n* Hostname: your pi IP address  If you are using the prebuilt image specified above, then your Pi is ready to go. You should see a d2 and donkey directory.    Note: Check config.py to make sure it uses the correct settings for the PWM channel for steering and throttle. Open config.py  nano ~/d2/config.py  and make sure that you see the lines:   STEERING_CHANNEL = 1  THROTTLE_CHANNEL = 0   The 1 and 0 for the parts arguments should match whichever channel you used to plug your servo/ESC leads in to your 9685 board. Usually this ranges from 0-15 and it numbered on the board.", 
            "title": "Connecting to the Pi"
        }, 
        {
            "location": "/guide/install_software/#update-donkeycar-python-code-and-install", 
            "text": "The donkeycar Python code on the memory card image is likely older than the that on the Github repo, so update things once you have the Pi running.  cd ~/donkeycar\ngit pull\npip install -e .   Now let's setup things on your PC. Install varies depending on platform.", 
            "title": "Update Donkeycar Python code and install"
        }, 
        {
            "location": "/guide/install_software/#install-donkeycar-on-linux", 
            "text": "Install dependencies, setup virtualenv  sudo apt-get install virtualenv build-essential python3-dev gfortran libhdf5-dev\nvirtualenv env -p python3\nsource env/bin/activate\npip install keras==2.0.6\npip install tensorflow==1.3.0  Install donkeycar  git clone https://github.com/wroscoe/donkey donkeycar\npip install -e donkeycar", 
            "title": "Install donkeycar on Linux"
        }, 
        {
            "location": "/guide/install_software/#install-donkeycar-on-windows", 
            "text": "Install  miniconda Python 3.6 64 bit . Be sure to check the box to allow it to modify your system path variable to add conda.    Install  git 64 bit    From the start menu start the Anaconda Prompt.    Change to a dir you would like to use as the head of your projects.    mkdir projects\ncd projects   Get the latest donkey from Github.   git clone https://github.com/wroscoe/donkey\ncd donkey   Create the Python Anaconda environment   conda env create -f envs\\windows.yml\nactivate donkey   Install donkey source and create your local working dir:   pip install -e .\ndonkey createcar --path ~/d2   Note: After closing the Anaconda Prompt, when you open it again, you will need to \ntype  activate donkey  to re-enable the mappings to donkey specific \nPython libraries", 
            "title": "Install donkeycar on Windows"
        }, 
        {
            "location": "/guide/install_software/#install-donkeycar-on-mac", 
            "text": "Install  miniconda Python 3.6 64 bit    Install  git 64 bit    Start Terminal    Change to a dir you would like to use as the head of your projects.    mkdir projects\ncd projects   Get the latest donkey from Github.   git clone https://github.com/wroscoe/donkey\ncd donkey   Create the Python anaconda environment   conda env create -f envs/mac.yml\nsource activate donkey   Install Tensorflow   pip install https://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-1.3.0-py3-none-any.whl   Install donkey source and create your local working dir:   pip install -e .\ndonkey createcar --path ~/d2   Note: After closing the Terminal, when you open it again, you will need to \ntype  source activate donkey  to re-enable the mappings to donkey specific \nPython libraries", 
            "title": "Install donkeycar on Mac"
        }, 
        {
            "location": "/guide/install_software/#install-another-fork-of-donkeycar", 
            "text": "Occasionally you may want to run with changes from a separate fork of donkey. You may uninstall one and install another. That's fastest, but leaves you with only the forked version installed:  pip uninstall donkeycar\ngit clone --depth=1 https://github.com/ username /donkey donkey_ username \ncd donkey_ username \npip install -e .  To get back to the stock donkey install:  pip uninstall donkeycar\ngit clone --depth=1 https://github.com/wroscoe/donkey donkey\ncd donkey\npip install -e .", 
            "title": "Install another fork of donkeycar"
        }, 
        {
            "location": "/guide/get_driving/", 
            "text": "Drive your car.\n\n\nAfter you've calibrated your car you can start driving it. \n\n\nStart your car.\n\n\n\n\n Put your car in a safe place where the wheels are off the ground \n This\nis the step were the car can take off. \n\n\n\n\n\n\nNormal usage\n\n\nIn future runs, when you start a new session, you will want to:\n\n\nOn Windows:\n\n\n\n\nstart a new Anaconda Prompt from Windows start menu\n\n\nActivate mappings to donkey Python setup with: \nactivate donkey\n\n\nChange to your local dir for managing donkey: \ncd ~/d2\n\n\nFind your pi\n\n\n\n\nThis will show your IP address, prompt for your password, and then search \nfor your cars IP address. \n\n\n\n\nIf your car's IP address is not shown:\n\n\n\n\nFind another way to scan your local network for your raspberry pi \n\n\nConnect a monitor/keyboard and ensure your pi is connected to the the same wifi network as your computer. \n\n\n\n\n\n\nAssuming that you did find your pi on the network, you can now connect to it via SSH. \n\n\nssh pi@\nyour_pi_ip_address\n\n\n\n\n\nThe default user name is 'pi' and the password is 'raspberry'.  If you are using the pre-built Donkey image, the password is 'asdfasdf'.\n\n\nCreate your car application.\n\n\ndonkey createcar --template donkey2 --path ~/d2\n\n\n\n\nSee also \nmore information.\n\n\nStart your car.\n\n\nOpen your car's folder and start your car. \n\n\ncd ~/d2\npython manage.py drive\n\n\n\n\nThis script will start the drive loop in your car which includes a part that \nis a web server for you to control your car. You can now control your car\nfrom a web browser at the URL: \nyour car's IP's address\n:8887\n\n\n\n\nDriving with Web Controller\n\n\nOn your phone you can now press start to set your phones current tilt to be\nzero throttle and steering. Now tilting your phone forward will increase throttle and tilting it side to side will turn the steering. \n\n\nFeatures\n\n\n\n\nRecording - Press record data to start recording images, steering angels and throttle values. \n\n\nThrottle mode - Option to set the throttle as constant. This is used in \nraces if you have a pilot that will steer but doesn't control throttle. \n\n\nPilot mode - Choose this if the pilot should control the angle and/or throttle.\n\n\nMax throttle - Select the maximum throttle.\n\n\n\n\nKeyboard shortcuts\n\n\n\n\nspace\n : stop car and stop recording\n\n\nr\n : toggle recording\n\n\ni\n : increase throttle\n\n\nk\n : decrease throttle\n\n\nj\n : turn left \n\n\nl\n : turn right \n\n\n\n\n\n\nDriving with Physical Joystick Controller\n\n\nYou may find that it helps to use a physical joystick device to control your vehicle.\n\n\nSetup Bluetooth and pair joystick\n\n\nCheck the \nControllers\n section to read about setting up the bluetooth connection.\n\n\nStart car\n\n\ncd ~/d2\npython manage.py drive --js\n\n\n\n\nOptionally, if you want joystick use to be sticky and don't want to add the --js each time, modify your config.py so that USE_JOYSTICK_AS_DEFAULT = True\n\n\nnano config.py\n\n\n\n\nJoystick Controls\n\n\n\n\nLeft analog stick - Left and right to adjust steering\n\n\nRight analog stick - Forward to increase forward throttle\n\n\nPull back twice on right analog to reverse\n\n\n\n\n\n\nWhenever the throttle is not zero, driving data will be recorded - as long as you are in User mode!\n\n\n\n\n\n\nSelect button switches modes - \"User, Local Angle, Local(angle and throttle)\"\n\n\nTriangle - Increase max throttle\n\n\nX  - Decrease max throttle\n\n\nCircle - Toggle recording (disabled by default. auto record on throttle is enabled by default)\n\n\ndpad up - Increase throttle scale\n\n\ndpad down - Decrease throttle scale\n\n\ndpad left - Increase steering scale\n\n\ndpad right - Decrease steering scale\n\n\nStart - Toggle constant throttle. Sets to max throttle (modified by X and Triangle).\n\n\n\n\nStart car for self-driving\n\n\ncd ~/d2\npython manage.py drive --model \npath/to/model\n --js\n\n\n\n\nHit the Select button to toggle between three modes - User, Local Angle, and Local Throttle \n Angle.\n\n\n\n\nUser - User controls both steering and throttle with joystick\n\n\nLocal Angle - Ai controls steering, user controls throttle\n\n\nLocal Throttle \n Angle - Ai controls both steering and throttle\n\n\n\n\nWhen the car is in Local Angle mode, the NN will steer. You must provide throttle.", 
            "title": "Get driving."
        }, 
        {
            "location": "/guide/get_driving/#drive-your-car", 
            "text": "After you've calibrated your car you can start driving it.", 
            "title": "Drive your car."
        }, 
        {
            "location": "/guide/get_driving/#start-your-car", 
            "text": "Put your car in a safe place where the wheels are off the ground   This\nis the step were the car can take off.", 
            "title": "Start your car."
        }, 
        {
            "location": "/guide/get_driving/#normal-usage", 
            "text": "In future runs, when you start a new session, you will want to:  On Windows:   start a new Anaconda Prompt from Windows start menu  Activate mappings to donkey Python setup with:  activate donkey  Change to your local dir for managing donkey:  cd ~/d2  Find your pi   This will show your IP address, prompt for your password, and then search \nfor your cars IP address.    If your car's IP address is not shown:   Find another way to scan your local network for your raspberry pi   Connect a monitor/keyboard and ensure your pi is connected to the the same wifi network as your computer.     Assuming that you did find your pi on the network, you can now connect to it via SSH.   ssh pi@ your_pi_ip_address   The default user name is 'pi' and the password is 'raspberry'.  If you are using the pre-built Donkey image, the password is 'asdfasdf'.", 
            "title": "Normal usage"
        }, 
        {
            "location": "/guide/get_driving/#create-your-car-application", 
            "text": "donkey createcar --template donkey2 --path ~/d2  See also  more information.", 
            "title": "Create your car application."
        }, 
        {
            "location": "/guide/get_driving/#start-your-car_1", 
            "text": "Open your car's folder and start your car.   cd ~/d2\npython manage.py drive  This script will start the drive loop in your car which includes a part that \nis a web server for you to control your car. You can now control your car\nfrom a web browser at the URL:  your car's IP's address :8887", 
            "title": "Start your car."
        }, 
        {
            "location": "/guide/get_driving/#driving-with-web-controller", 
            "text": "On your phone you can now press start to set your phones current tilt to be\nzero throttle and steering. Now tilting your phone forward will increase throttle and tilting it side to side will turn the steering.", 
            "title": "Driving with Web Controller"
        }, 
        {
            "location": "/guide/get_driving/#features", 
            "text": "Recording - Press record data to start recording images, steering angels and throttle values.   Throttle mode - Option to set the throttle as constant. This is used in \nraces if you have a pilot that will steer but doesn't control throttle.   Pilot mode - Choose this if the pilot should control the angle and/or throttle.  Max throttle - Select the maximum throttle.", 
            "title": "Features"
        }, 
        {
            "location": "/guide/get_driving/#keyboard-shortcuts", 
            "text": "space  : stop car and stop recording  r  : toggle recording  i  : increase throttle  k  : decrease throttle  j  : turn left   l  : turn right", 
            "title": "Keyboard shortcuts"
        }, 
        {
            "location": "/guide/get_driving/#driving-with-physical-joystick-controller", 
            "text": "You may find that it helps to use a physical joystick device to control your vehicle.", 
            "title": "Driving with Physical Joystick Controller"
        }, 
        {
            "location": "/guide/get_driving/#setup-bluetooth-and-pair-joystick", 
            "text": "Check the  Controllers  section to read about setting up the bluetooth connection.", 
            "title": "Setup Bluetooth and pair joystick"
        }, 
        {
            "location": "/guide/get_driving/#start-car", 
            "text": "cd ~/d2\npython manage.py drive --js  Optionally, if you want joystick use to be sticky and don't want to add the --js each time, modify your config.py so that USE_JOYSTICK_AS_DEFAULT = True  nano config.py", 
            "title": "Start car"
        }, 
        {
            "location": "/guide/get_driving/#joystick-controls", 
            "text": "Left analog stick - Left and right to adjust steering  Right analog stick - Forward to increase forward throttle  Pull back twice on right analog to reverse    Whenever the throttle is not zero, driving data will be recorded - as long as you are in User mode!    Select button switches modes - \"User, Local Angle, Local(angle and throttle)\"  Triangle - Increase max throttle  X  - Decrease max throttle  Circle - Toggle recording (disabled by default. auto record on throttle is enabled by default)  dpad up - Increase throttle scale  dpad down - Decrease throttle scale  dpad left - Increase steering scale  dpad right - Decrease steering scale  Start - Toggle constant throttle. Sets to max throttle (modified by X and Triangle).", 
            "title": "Joystick Controls"
        }, 
        {
            "location": "/guide/get_driving/#start-car-for-self-driving", 
            "text": "cd ~/d2\npython manage.py drive --model  path/to/model  --js  Hit the Select button to toggle between three modes - User, Local Angle, and Local Throttle   Angle.   User - User controls both steering and throttle with joystick  Local Angle - Ai controls steering, user controls throttle  Local Throttle   Angle - Ai controls both steering and throttle   When the car is in Local Angle mode, the NN will steer. You must provide throttle.", 
            "title": "Start car for self-driving"
        }, 
        {
            "location": "/guide/calibrate/", 
            "text": "Calibrate your Car\n\n\nThe point of calibrating your car is to make it drive consitently with\nother vehicles. These instructions \n\n\nHow to adjust your car's settings.\n\n\nAll of the car's settings are in the \nconfig.py\n script generated when \nyou ran the \ndonkey createcar --path ~/d2\n command. You can edit\nthis file on your car by running:\n\n\nnano ~/d2/config.py\n\n\n\n\nOur goal is to edit these settings so your car will drive like every\nother calibrated Donkey2. This way you'll be able to share pilots and \ndatasets between each car. \n\n\nSteering Calibration\n\n\n\n\nMake sure your car is off the ground to prevent a runaway situation.\n\n\n\n\n\n\nTurn on your car.\n\n\nFind the servo cable on your car and see what channel it's plugged into the\nPCA board. It should be 1 or 0.\n\n\nRun \ndonkey calibrate --channel \nyour_steering_channel\n\n\nEnter \n360' and you should see the wheels on your car move slightly. If not \nenter\n400\nor\n300`.\n\n\nNext enter values +/- 10 from your starting value to find the PWM setting\nthat makes your car turn all the way left and all the way right. Remember \nthese values. \n\n\nEnter these values in \nconfig.py\n script as \nSTEERING_RIGHT_PWM\n and \n\nSTEERING_LEFT_PWM\n. \n\n\n\n\nThrottle Calibration\n\n\n\n\nFind the cable coming from your ESC and see what channel it goes into the\nPCA board. This is your throttle channel.\n\n\nrun \ndonkey calibrate --channel \nyour_throttle_channel\n\n\nEnter \n370\n when prompted for a PWM value.\n\n\nYou should hear your ESC beep indicating that it's calibrated. \n\n\nEnter \n400\n and you should see your cars wheels start to go forward. If not,\nits likely that this is reverse, try entering \n330\n instead.\n\n\nKeep trying different values until you've found a reasonable max speed and\nremember this PWM value.\n\n\n\n\nReverse on RC cars is a little tricky because the ESC must receive a\nreverse pulse, zero pulse, reverse pulse to start to go backwards. To calibrate\na reverse PWM setting...\n\n\n\n\nUse the same technique as above set the PWM setting to your zero throttle. \n\n\nEnter the reverse value, then the zero throttle value, then the reverse \nvalue again. \n\n\nEnter values +/- 10 of the reverse value to find a reasonable reverse speed.\nRemember this reverse PWM value. \n\n\n\n\nNow open your \nconfig.py\n script and enter the PWM values for your car into\nthe throttle_controller part. \n\n \nTHROTTLE_FORWARD_PWM\n = PWM value for full throttle forward\n\n \nTHROTTLE_STOPPED_PWM\n = PWM value for zero throttle\n* \nTHROTTLE_REVERSE_PWM\n = PWM value at full reverse throttle\n\n\nFine tuning your calibration.\n\n\n\n\nNow that you have your care roughly calibrated you can try driving it to \nverify that it drives as expected. Here's how to fine tune your car's calibration. \n\n\n\n\nStart your car by running \npython manage.py drive\n.\n\n\nGo to \nyour_cars_ip_address\n:8887\n in a browser. \n\n\nPress \nj\n until the cars steering is all the way right. \n\n\nPress \ni\n a couple times to get the car to go forward.\n\n\nMeasure the diameter of the turn and record it on a spreadsheet. \n\n\nRepeat this measurement for different steering values for turning each \ndirection. \n\n\nChart these so you can see if your car turns the same in each direction. \n\n\n\n\nCorrections\n\n If your car turns the same amount at an 80% turn and a 100% turn, change the\nPWM setting for that turn direction to be the PWM value at 80%. \n\n If your car is biased to turn one direction, change the PWM values of your turns\nin the opposite direction of the bias.\n\n\nAfter you've fine tuned your car the steering chart should look something like\nthis.", 
            "title": "Calibrate steering and throttle."
        }, 
        {
            "location": "/guide/calibrate/#calibrate-your-car", 
            "text": "The point of calibrating your car is to make it drive consitently with\nother vehicles. These instructions", 
            "title": "Calibrate your Car"
        }, 
        {
            "location": "/guide/calibrate/#how-to-adjust-your-cars-settings", 
            "text": "All of the car's settings are in the  config.py  script generated when \nyou ran the  donkey createcar --path ~/d2  command. You can edit\nthis file on your car by running:  nano ~/d2/config.py  Our goal is to edit these settings so your car will drive like every\nother calibrated Donkey2. This way you'll be able to share pilots and \ndatasets between each car.", 
            "title": "How to adjust your car's settings."
        }, 
        {
            "location": "/guide/calibrate/#steering-calibration", 
            "text": "Make sure your car is off the ground to prevent a runaway situation.    Turn on your car.  Find the servo cable on your car and see what channel it's plugged into the\nPCA board. It should be 1 or 0.  Run  donkey calibrate --channel  your_steering_channel  Enter  360' and you should see the wheels on your car move slightly. If not \nenter 400 or 300`.  Next enter values +/- 10 from your starting value to find the PWM setting\nthat makes your car turn all the way left and all the way right. Remember \nthese values.   Enter these values in  config.py  script as  STEERING_RIGHT_PWM  and  STEERING_LEFT_PWM .", 
            "title": "Steering Calibration"
        }, 
        {
            "location": "/guide/calibrate/#throttle-calibration", 
            "text": "Find the cable coming from your ESC and see what channel it goes into the\nPCA board. This is your throttle channel.  run  donkey calibrate --channel  your_throttle_channel  Enter  370  when prompted for a PWM value.  You should hear your ESC beep indicating that it's calibrated.   Enter  400  and you should see your cars wheels start to go forward. If not,\nits likely that this is reverse, try entering  330  instead.  Keep trying different values until you've found a reasonable max speed and\nremember this PWM value.   Reverse on RC cars is a little tricky because the ESC must receive a\nreverse pulse, zero pulse, reverse pulse to start to go backwards. To calibrate\na reverse PWM setting...   Use the same technique as above set the PWM setting to your zero throttle.   Enter the reverse value, then the zero throttle value, then the reverse \nvalue again.   Enter values +/- 10 of the reverse value to find a reasonable reverse speed.\nRemember this reverse PWM value.    Now open your  config.py  script and enter the PWM values for your car into\nthe throttle_controller part.    THROTTLE_FORWARD_PWM  = PWM value for full throttle forward   THROTTLE_STOPPED_PWM  = PWM value for zero throttle\n*  THROTTLE_REVERSE_PWM  = PWM value at full reverse throttle", 
            "title": "Throttle Calibration"
        }, 
        {
            "location": "/guide/calibrate/#fine-tuning-your-calibration", 
            "text": "Now that you have your care roughly calibrated you can try driving it to \nverify that it drives as expected. Here's how to fine tune your car's calibration.    Start your car by running  python manage.py drive .  Go to  your_cars_ip_address :8887  in a browser.   Press  j  until the cars steering is all the way right.   Press  i  a couple times to get the car to go forward.  Measure the diameter of the turn and record it on a spreadsheet.   Repeat this measurement for different steering values for turning each \ndirection.   Chart these so you can see if your car turns the same in each direction.    Corrections  If your car turns the same amount at an 80% turn and a 100% turn, change the\nPWM setting for that turn direction to be the PWM value at 80%.   If your car is biased to turn one direction, change the PWM values of your turns\nin the opposite direction of the bias.  After you've fine tuned your car the steering chart should look something like\nthis.", 
            "title": "Fine tuning your calibration."
        }, 
        {
            "location": "/guide/train_autopilot/", 
            "text": "Train an autopilot with Keras\n\n\nNow that you're able to drive your car reliably you can use Keras to train a\nneural network to drive like you. Here are the steps.\n\n\nCollect Data\n\n\nMake sure you collect good data. \n\n\n\n\nPractice driving around the track a couple times without recording data.\n\n\nWhen you're confident you can drive 10 laps without mistake press \nStart Recording\n\n\nIf you crash or run off the track press Stop Car immediately to stop recording. \nA little bad data won't affect your autopilot. \n\n\nAfter you've collected 10-20 laps of good data (5-20k images) you can stop \nyour car with \nCtrl-c\n in the ssh session for your car.\n\n\nThe data you've collected is in the data folder in the most recent tub folder.\n\n\n\n\nTransfer data from your car to your computer.\n\n\nSince the Raspberry Pi is not very powerful, we need to transfer the data\nto a PC computer to train.\n\n\nIn a new terminal session on your host PC use rsync to copy your cars \nfolder from the raspberry pi.\n\n\nrsync -r pi@\nyour_pi_ip_address\n:~/d2/data/  ~/d2/data/\n\n\n\n\nTrain a model\n\n\n\n\nIn the same terminal you can now run the training script on the latest tub by passing the path to that tub as an argument. You can optionally pass path masks, such as \n./data/*\n or \n./data/tub_?_17-08-28\n to gather multiple tubs. For example:\n\n\n\n\n python ~/d2/manage.py train --tub \ntub folder names comma separated\n --model ./models/mypilot\n\n\n\n\nOptionally you can pass no arguments for the tub, and then all tubs will be used in the default data dir.\n\n\n python ~/d2/manage.py train --model ~/d2/models/mypilot\n\n\n\n\n\n\nNow you can use rsync again to move your pilot back to your car. \n\n\n\n\nrsync -r ~/d2/models/ pi@\nyour_ip_address\n:~/d2/models/\n\n\n\n\n\n\nNow you can start your car again and pass it your model to drive.\n\n\n\n\npython manage.py drive --model ~/d2/models/mypilot\n\n\n\n\nTraining Tips:\n\n\n\n\n\n\nMode \n Pilot\n: Congratulations on getting it this far. The first thing to note after running the command above, is to look at the options in the Mode \n Pilot menu. It can be pretty confusing. So here's what the different options mean:\n\n\na. \nUser\n : As you guessed, this is where you are in control of both the steering and throttle control.\n\n\nb. \nLocal Angle\n : Not too obvious, but this is where the trained model (mypilot from above) controls the steering. The \nLocal\n refers to the trained model which is locally hosted on the raspberry-pi.\n\n\nc. \nLocal Pilot\n : This is where the trained model (mypilot) assumes control of both the steering and the throttle. As of now, it's purportedly not very reliable.\n\n\nd. \nAuto Angle\n : Same as Local Angle, except for it's relying on a model (pilot) running in a separate server. \n\n\ne. \nAuto Pilot\n : Same as Local Pilot, but as you guessed, a remote model assumes control of both the steering and the throttle.\n\n\nBe sure to also check out the \nMax Throttle\n and \nThrottle Mode\n options, and play around with a few settings. Can help with training quite a lot. \n\n\n\n\n\n\nBuild a Simple Track\n : This isn't very well-documented, but the car should (theoretically) be able to train against any kind of track. To start off with, it might not be necessary to build a two-lane track with a striped center-lane. Try with a single lane with no center-line, or just a single strip that makes a circuit! At the least, you'll be able to do an end-to-end testing and verify that the software pipeline is all properly functional. Of course, as the next-step, you'll want to create a more standard track, and compete at a \nmeetup\n nearest to you!\n\n\n\n\n\n\nGet help\n : Try to get some helping hands from a friend or two. Again, this helps immensely with building the track, because it is harder than it looks to build a two-line track on your own! Also, you can save on resources (and tapes) by using a \nribbon\n instead of tapes. They'll still need a bit of tapes to hold them, but you can reuse them and they can be laid down with a lot less effort (Although the wind, if you're working outside, might make it difficult to lay them down initially).", 
            "title": "Train an autopilot."
        }, 
        {
            "location": "/guide/train_autopilot/#train-an-autopilot-with-keras", 
            "text": "Now that you're able to drive your car reliably you can use Keras to train a\nneural network to drive like you. Here are the steps.", 
            "title": "Train an autopilot with Keras"
        }, 
        {
            "location": "/guide/train_autopilot/#collect-data", 
            "text": "Make sure you collect good data.    Practice driving around the track a couple times without recording data.  When you're confident you can drive 10 laps without mistake press  Start Recording  If you crash or run off the track press Stop Car immediately to stop recording. \nA little bad data won't affect your autopilot.   After you've collected 10-20 laps of good data (5-20k images) you can stop \nyour car with  Ctrl-c  in the ssh session for your car.  The data you've collected is in the data folder in the most recent tub folder.", 
            "title": "Collect Data"
        }, 
        {
            "location": "/guide/train_autopilot/#transfer-data-from-your-car-to-your-computer", 
            "text": "Since the Raspberry Pi is not very powerful, we need to transfer the data\nto a PC computer to train.  In a new terminal session on your host PC use rsync to copy your cars \nfolder from the raspberry pi.  rsync -r pi@ your_pi_ip_address :~/d2/data/  ~/d2/data/", 
            "title": "Transfer data from your car to your computer."
        }, 
        {
            "location": "/guide/train_autopilot/#train-a-model", 
            "text": "In the same terminal you can now run the training script on the latest tub by passing the path to that tub as an argument. You can optionally pass path masks, such as  ./data/*  or  ./data/tub_?_17-08-28  to gather multiple tubs. For example:    python ~/d2/manage.py train --tub  tub folder names comma separated  --model ./models/mypilot  Optionally you can pass no arguments for the tub, and then all tubs will be used in the default data dir.   python ~/d2/manage.py train --model ~/d2/models/mypilot   Now you can use rsync again to move your pilot back to your car.    rsync -r ~/d2/models/ pi@ your_ip_address :~/d2/models/   Now you can start your car again and pass it your model to drive.   python manage.py drive --model ~/d2/models/mypilot", 
            "title": "Train a model"
        }, 
        {
            "location": "/guide/train_autopilot/#training-tips", 
            "text": "Mode   Pilot : Congratulations on getting it this far. The first thing to note after running the command above, is to look at the options in the Mode   Pilot menu. It can be pretty confusing. So here's what the different options mean:  a.  User  : As you guessed, this is where you are in control of both the steering and throttle control.  b.  Local Angle  : Not too obvious, but this is where the trained model (mypilot from above) controls the steering. The  Local  refers to the trained model which is locally hosted on the raspberry-pi.  c.  Local Pilot  : This is where the trained model (mypilot) assumes control of both the steering and the throttle. As of now, it's purportedly not very reliable.  d.  Auto Angle  : Same as Local Angle, except for it's relying on a model (pilot) running in a separate server.   e.  Auto Pilot  : Same as Local Pilot, but as you guessed, a remote model assumes control of both the steering and the throttle.  Be sure to also check out the  Max Throttle  and  Throttle Mode  options, and play around with a few settings. Can help with training quite a lot.     Build a Simple Track  : This isn't very well-documented, but the car should (theoretically) be able to train against any kind of track. To start off with, it might not be necessary to build a two-lane track with a striped center-lane. Try with a single lane with no center-line, or just a single strip that makes a circuit! At the least, you'll be able to do an end-to-end testing and verify that the software pipeline is all properly functional. Of course, as the next-step, you'll want to create a more standard track, and compete at a  meetup  nearest to you!    Get help  : Try to get some helping hands from a friend or two. Again, this helps immensely with building the track, because it is harder than it looks to build a two-line track on your own! Also, you can save on resources (and tapes) by using a  ribbon  instead of tapes. They'll still need a bit of tapes to hold them, but you can reuse them and they can be laid down with a lot less effort (Although the wind, if you're working outside, might make it difficult to lay them down initially).", 
            "title": "Training Tips:"
        }, 
        {
            "location": "/guide/simulator/", 
            "text": "Donkey Simulator\n\n\nExperiment with training a donkey car to drive in simulation. This simulator is built on the the Unity game platform, uses their internal physics and graphics, and connects to a donkey Python process to use our trained model to control the simulated Donkey.\n\n\nDownload the Simulator\n\n\nYou will need a specific build per platform:\n\n\n\n\nUbuntu 16.04 \ndownload\n\n\nMac 10.10.5+ \ndownload\n\n\nWindows 7+ \ndownload\n\n\n\n\nExtract this compressed file. It will create a folder containing an executable. Double click that executable to launch the simulator.\n\n\nExtra Mac Steps\n\n\nIf logs are not being generated you are probably running a version of OS X that sandboxes untrusted applications. This prevents the simulator writing to disk. To resolve this, move the executable within the Applications folder.\n\n\nRecorded Data\n\n\nThis simulator can create log data in the donkey tub format. This is stored in the \nlog\n dir at the root of the folder next to the executable. On the mac you will need to browse the package contents to see this folder. If this folder is missing, no data will be recorded.\n\n\nYou can choose two different scenes.\n\n\nGenerated Road Scene\n\n\nThe purpose of this is to create a randomly generated road so that you can have miles of curves on different road surfaces. You can train on one road and test on something similar, or a totally different surface.\n\n\nWarehouse Scene\n\n\nThe purpose of this is to create a specific track that is somewhat similar to an actual course in use as the primary track for the Oakland DIYRobocars Meetup.\n\n\n\n\nMenu Options:\n\n\nJoystick/Keyboard No Rec\n\n\nDrive the donkey with a joystick or keyboard. I used a PS2 Joystick and a PS3 Joystick. Keyboard controls use arrow keys to steer. In this mode, no data is recorded.\n\n\n\n\nNote: Keyboard data produces steering information that is stepped (ie. -1, 0, +1) and may be difficult to train with. See below for joystick setup.\n\n\n\n\nJoystick/Keyboard w Rec\n\n\nDrive the donkey with a joystick or keyboard. In this mode, data is stored in the tub donkey format.\n\n\nAuto Drive No Rec\n\n\nThis uses path information to guide the donkey down the track. It uses a PID controller to steer, so there is some oscillation. In this mode, no data is stored.\n\n\nAuto Drive w Rec\n\n\nThis uses path information to guide the donkey down the track. It uses a PID controller to steer, so there is some oscillation. In this mode, data is stored in the tub donkey format.\n\n\nNext Track\n\n\nIn the generated road scene, this will switch out the road surface and track width.\n\n\nRegen Track\n\n\nUse the current surface type, but generate a new random path and road.\n\n\n\n\nPID Controls\n\n\nMax Speed\n\n\nThis setting determines the target speed during the PID auto drive. It will also affect the speed when driving by keyboard controls (not recommended).\n\n\nProp\n\n\nThis is short for proportional. This is the P part of PID that attempts to adjust steering back to the path in proportion to the deviation.\n\n\nDiff\n\n\nThis is the D part of PID that attempts to limit steering back to the path as derivative to the trend of deviation, designed to limit overshoot.\n\n\nMax Steering\n\n\n\n\nNote - Max Steering is an important adjustment. This affects categorical training quite strongly. As the steering data is normalized when written, and multiplies after coming from Python, this angle should remain constant over training and simulation. Take care when changing this value. And separate data and models by max steering setting.\n\n\n\n\nMax steering can only be adjusted when using \nAuto Drive No Rec\n. It will also affect joystick and keyboard steering range, and should be saved and reloaded for you.\n\n\nThe default categorical model has 16 bins, or classes. And so, with a max steering of +-16, each bin will represent 2 degrees. It is helpful to graph the model training vs the example data to get and intuition about how it fits the data.\n\n\n\n\nTypical Use\n\n\n\n\nStart simulator\n\n\nDouble check that \nlog\n dir exists and is empty\n\n\nStart scene of your choice\n\n\nHit \nAuto Drive w Rec\n button\n\n\nVary the Max Speed, Prop, and Diff sliders to obtain a variety of driving styles\n\n\nWait 10-15 minutes until you have recorded 10K+ frames of data.\n\n\nHit the \nStop\n button\n\n\nHit the \nExit\n button\n\n\nMove the \nlog\n dir to the \n~/d2/data/\n dir where you normally put tub data. This will create a \n~/d2/data/log\n path.\n\n\nTrain as usual. \n\n\n\n\n\n\nNote: I had problems w default categorical model. Linear model worked better for me.\n\n\n\n\npython manage.py train --tub=data/log --model=models/mypilot\n\n\n\n\n\n\nStart the simulator server. \n\n\n\n\ndonkey sim --model=models/mypilot\n\n\n\n\nWait to see \nwsgi starting up on http://0.0.0.0:9090\n\n\n\n\nEnter the scene of your choice in the simulator\n\n\nHit the button \nNN Steering w Websockets\n\n\nYour donkey should begin to move. You should see in the upper left two values for incoming steering and throttle.\n\n\n\n\n\n\nJoystick Setup\n\n\nKeyboard input provides a poor learning signal. I recommend using the joystick to provide manual driving data. \n\n\nLinux Joystick Setup\n\n\nUnity on Linux uses the SDL library to see your joystick. And in particular the GamePad API. This is not setup by default. I needed to do these steps:\n\n\ngit clone https://github.com/Grumbel/sdl-jstest\n\nsudo apt-get install cmake\nsudo apt-get install libsdl1.2-dev\nsudo apt-get install libsdl2-dev\nsudo apt-get install libncurses5-dev\ncd sdl-jstest\nmkdir build\ncd build\ncmake ..\nmake install\n\n\n./sdl2-jstest -l\n\n\n\n\nLook for:\nJoystick GUID: 030000004f04000008b1000000010000\n\n\nThe GUID will be different depending on your device.\n\n\nThen open:\nhttps://github.com/gabomdq/SDL_GameControllerDB/blob/master/gamecontrollerdb.txt\n\n\nand look for your GUID in Linux section. One line is for one device type. Now modify your environment to specify information for your device:\n\n\nsudo -H gedit /etc/environment\n\n\n\n\nadd the line SDL_GAMECONTROLLERCONFIG=, make sure to add the quotes at begin and end. ie.\n\n\nSDL_GAMECONTROLLERCONFIG=\"030000004f04000008b1000000010000, ... and the rest of the long line copied from gamecontrollerdb\"\n\n\n\n\nreboot\n\n\nstart sim\n\n\nchoose drive w joystick\n\n\nmove sticks\n\n\ndo happy dance", 
            "title": "Donkey Simulator."
        }, 
        {
            "location": "/guide/simulator/#donkey-simulator", 
            "text": "Experiment with training a donkey car to drive in simulation. This simulator is built on the the Unity game platform, uses their internal physics and graphics, and connects to a donkey Python process to use our trained model to control the simulated Donkey.", 
            "title": "Donkey Simulator"
        }, 
        {
            "location": "/guide/simulator/#download-the-simulator", 
            "text": "You will need a specific build per platform:   Ubuntu 16.04  download  Mac 10.10.5+  download  Windows 7+  download   Extract this compressed file. It will create a folder containing an executable. Double click that executable to launch the simulator.", 
            "title": "Download the Simulator"
        }, 
        {
            "location": "/guide/simulator/#extra-mac-steps", 
            "text": "If logs are not being generated you are probably running a version of OS X that sandboxes untrusted applications. This prevents the simulator writing to disk. To resolve this, move the executable within the Applications folder.", 
            "title": "Extra Mac Steps"
        }, 
        {
            "location": "/guide/simulator/#recorded-data", 
            "text": "This simulator can create log data in the donkey tub format. This is stored in the  log  dir at the root of the folder next to the executable. On the mac you will need to browse the package contents to see this folder. If this folder is missing, no data will be recorded.  You can choose two different scenes.", 
            "title": "Recorded Data"
        }, 
        {
            "location": "/guide/simulator/#generated-road-scene", 
            "text": "The purpose of this is to create a randomly generated road so that you can have miles of curves on different road surfaces. You can train on one road and test on something similar, or a totally different surface.", 
            "title": "Generated Road Scene"
        }, 
        {
            "location": "/guide/simulator/#warehouse-scene", 
            "text": "The purpose of this is to create a specific track that is somewhat similar to an actual course in use as the primary track for the Oakland DIYRobocars Meetup.", 
            "title": "Warehouse Scene"
        }, 
        {
            "location": "/guide/simulator/#menu-options", 
            "text": "", 
            "title": "Menu Options:"
        }, 
        {
            "location": "/guide/simulator/#joystickkeyboard-no-rec", 
            "text": "Drive the donkey with a joystick or keyboard. I used a PS2 Joystick and a PS3 Joystick. Keyboard controls use arrow keys to steer. In this mode, no data is recorded.   Note: Keyboard data produces steering information that is stepped (ie. -1, 0, +1) and may be difficult to train with. See below for joystick setup.", 
            "title": "Joystick/Keyboard No Rec"
        }, 
        {
            "location": "/guide/simulator/#joystickkeyboard-w-rec", 
            "text": "Drive the donkey with a joystick or keyboard. In this mode, data is stored in the tub donkey format.", 
            "title": "Joystick/Keyboard w Rec"
        }, 
        {
            "location": "/guide/simulator/#auto-drive-no-rec", 
            "text": "This uses path information to guide the donkey down the track. It uses a PID controller to steer, so there is some oscillation. In this mode, no data is stored.", 
            "title": "Auto Drive No Rec"
        }, 
        {
            "location": "/guide/simulator/#auto-drive-w-rec", 
            "text": "This uses path information to guide the donkey down the track. It uses a PID controller to steer, so there is some oscillation. In this mode, data is stored in the tub donkey format.", 
            "title": "Auto Drive w Rec"
        }, 
        {
            "location": "/guide/simulator/#next-track", 
            "text": "In the generated road scene, this will switch out the road surface and track width.", 
            "title": "Next Track"
        }, 
        {
            "location": "/guide/simulator/#regen-track", 
            "text": "Use the current surface type, but generate a new random path and road.", 
            "title": "Regen Track"
        }, 
        {
            "location": "/guide/simulator/#pid-controls", 
            "text": "", 
            "title": "PID Controls"
        }, 
        {
            "location": "/guide/simulator/#max-speed", 
            "text": "This setting determines the target speed during the PID auto drive. It will also affect the speed when driving by keyboard controls (not recommended).", 
            "title": "Max Speed"
        }, 
        {
            "location": "/guide/simulator/#prop", 
            "text": "This is short for proportional. This is the P part of PID that attempts to adjust steering back to the path in proportion to the deviation.", 
            "title": "Prop"
        }, 
        {
            "location": "/guide/simulator/#diff", 
            "text": "This is the D part of PID that attempts to limit steering back to the path as derivative to the trend of deviation, designed to limit overshoot.", 
            "title": "Diff"
        }, 
        {
            "location": "/guide/simulator/#max-steering", 
            "text": "Note - Max Steering is an important adjustment. This affects categorical training quite strongly. As the steering data is normalized when written, and multiplies after coming from Python, this angle should remain constant over training and simulation. Take care when changing this value. And separate data and models by max steering setting.   Max steering can only be adjusted when using  Auto Drive No Rec . It will also affect joystick and keyboard steering range, and should be saved and reloaded for you.  The default categorical model has 16 bins, or classes. And so, with a max steering of +-16, each bin will represent 2 degrees. It is helpful to graph the model training vs the example data to get and intuition about how it fits the data.", 
            "title": "Max Steering"
        }, 
        {
            "location": "/guide/simulator/#typical-use", 
            "text": "Start simulator  Double check that  log  dir exists and is empty  Start scene of your choice  Hit  Auto Drive w Rec  button  Vary the Max Speed, Prop, and Diff sliders to obtain a variety of driving styles  Wait 10-15 minutes until you have recorded 10K+ frames of data.  Hit the  Stop  button  Hit the  Exit  button  Move the  log  dir to the  ~/d2/data/  dir where you normally put tub data. This will create a  ~/d2/data/log  path.  Train as usual.     Note: I had problems w default categorical model. Linear model worked better for me.   python manage.py train --tub=data/log --model=models/mypilot   Start the simulator server.    donkey sim --model=models/mypilot  Wait to see  wsgi starting up on http://0.0.0.0:9090   Enter the scene of your choice in the simulator  Hit the button  NN Steering w Websockets  Your donkey should begin to move. You should see in the upper left two values for incoming steering and throttle.", 
            "title": "Typical Use"
        }, 
        {
            "location": "/guide/simulator/#joystick-setup", 
            "text": "Keyboard input provides a poor learning signal. I recommend using the joystick to provide manual driving data.", 
            "title": "Joystick Setup"
        }, 
        {
            "location": "/guide/simulator/#linux-joystick-setup", 
            "text": "Unity on Linux uses the SDL library to see your joystick. And in particular the GamePad API. This is not setup by default. I needed to do these steps:  git clone https://github.com/Grumbel/sdl-jstest\n\nsudo apt-get install cmake\nsudo apt-get install libsdl1.2-dev\nsudo apt-get install libsdl2-dev\nsudo apt-get install libncurses5-dev\ncd sdl-jstest\nmkdir build\ncd build\ncmake ..\nmake install\n\n\n./sdl2-jstest -l  Look for:\nJoystick GUID: 030000004f04000008b1000000010000  The GUID will be different depending on your device.  Then open:\nhttps://github.com/gabomdq/SDL_GameControllerDB/blob/master/gamecontrollerdb.txt  and look for your GUID in Linux section. One line is for one device type. Now modify your environment to specify information for your device:  sudo -H gedit /etc/environment  add the line SDL_GAMECONTROLLERCONFIG=, make sure to add the quotes at begin and end. ie.  SDL_GAMECONTROLLERCONFIG=\"030000004f04000008b1000000010000, ... and the rest of the long line copied from gamecontrollerdb\"   reboot  start sim  choose drive w joystick  move sticks  do happy dance", 
            "title": "Linux Joystick Setup"
        }, 
        {
            "location": "/parts/about/", 
            "text": "What is a Part\n\n\nA part Python class that wraps a functional component of a vehicle. \nThese include: \n\n Sensors - Cameras, Lidar, Odometers, GPS ...\n\n Actuators - Motor Controllers\n\n Pilots - Lane Detectors, Behavioral Cloning models, ...\n\n Controllers - Web based or Bluetooth.\n* Stores - Tub, or a way to save data. \n\n\nHere is an example how to use the PiCamera part to publish an image in the\n'cam/img' channel on every drive loop.\n\n\nV = dk.Vehicle()\n\n#initialize the camera part\ncam = PiCamera()\n\n#add the part to the vehicle.\nV.add(cam, outputs=['cam/img'])\n\nV.start()\n\n\n\n\nAnatomy of a Part\n\n\nAll parts share a common structure so that they can all be run by the vehicles\ndrive loop. Here is an example of a part that will accept a number, multiply \nit by a random number and return the result.\n\n\nimport random \n\nclass RandPercent:\n    def run(self, x):\n        return x * random.random()\n\n\n\n\nNow to add this to a vehicle:\n\n\nV = dk.Vehicle()\n\n#initialize the channel value\nV.mem['const'] = 4\n\n#add the part to read and write to the same channel.\nV.add(RandPercent, inputs=['const'], outputs=['cost'])\n\nV.start(max_loops=5)\n\n\n\n\nThreaded Parts\n\n\nFor a vehicle to perform well the drive loop must execute 10-30 times per\nsecond so slow parts should be threaded to avoid holding up the drive loop.\n\n\nA threaded part needs to define the function that runs in the separate thread\nand the function to call that will return the most recent values quickly. \n\n\nHere's an example how to make the RandPercent part threaded if the run\nfunction too a second to complete. \n\n\nimport random \nimport time\n\nclass RandPercent:\n    self.in = 0.\n    self.out = 0.\n    def run(self, x):\n        return x * random.random()\n        time.sleep(1)\n\n    def update(self):\n        #the funtion run in it's own thread\n        while True:\n            self.out = self.run(self.in)\n\n    def run_threaded(self, x):\n        self.in = x\n        return self.out\n\n\n\n\n\n\n\npart.run\n : function used to run the part\n\n\npart.run_threaded\n : drive loop function run if part is threaded.\n\n\npart.update\n : threaded function  \n\n\npart.shutdown", 
            "title": "About"
        }, 
        {
            "location": "/parts/about/#what-is-a-part", 
            "text": "A part Python class that wraps a functional component of a vehicle. \nThese include:   Sensors - Cameras, Lidar, Odometers, GPS ...  Actuators - Motor Controllers  Pilots - Lane Detectors, Behavioral Cloning models, ...  Controllers - Web based or Bluetooth.\n* Stores - Tub, or a way to save data.   Here is an example how to use the PiCamera part to publish an image in the\n'cam/img' channel on every drive loop.  V = dk.Vehicle()\n\n#initialize the camera part\ncam = PiCamera()\n\n#add the part to the vehicle.\nV.add(cam, outputs=['cam/img'])\n\nV.start()", 
            "title": "What is a Part"
        }, 
        {
            "location": "/parts/about/#anatomy-of-a-part", 
            "text": "All parts share a common structure so that they can all be run by the vehicles\ndrive loop. Here is an example of a part that will accept a number, multiply \nit by a random number and return the result.  import random \n\nclass RandPercent:\n    def run(self, x):\n        return x * random.random()  Now to add this to a vehicle:  V = dk.Vehicle()\n\n#initialize the channel value\nV.mem['const'] = 4\n\n#add the part to read and write to the same channel.\nV.add(RandPercent, inputs=['const'], outputs=['cost'])\n\nV.start(max_loops=5)", 
            "title": "Anatomy of a Part"
        }, 
        {
            "location": "/parts/about/#threaded-parts", 
            "text": "For a vehicle to perform well the drive loop must execute 10-30 times per\nsecond so slow parts should be threaded to avoid holding up the drive loop.  A threaded part needs to define the function that runs in the separate thread\nand the function to call that will return the most recent values quickly.   Here's an example how to make the RandPercent part threaded if the run\nfunction too a second to complete.   import random \nimport time\n\nclass RandPercent:\n    self.in = 0.\n    self.out = 0.\n    def run(self, x):\n        return x * random.random()\n        time.sleep(1)\n\n    def update(self):\n        #the funtion run in it's own thread\n        while True:\n            self.out = self.run(self.in)\n\n    def run_threaded(self, x):\n        self.in = x\n        return self.out   part.run  : function used to run the part  part.run_threaded  : drive loop function run if part is threaded.  part.update  : threaded function    part.shutdown", 
            "title": "Threaded Parts"
        }, 
        {
            "location": "/parts/actuators/", 
            "text": "", 
            "title": "Actuators"
        }, 
        {
            "location": "/parts/controllers/", 
            "text": "Controller Parts\n\n\nLocal Web Controller\n\n\nThe default controller to drive the car with your phone or browser. This has a web live preview of camera. Control options include:\n\n\n\n\nA virtual joystick\n\n\nThe tilt, when using a mobile device with supported accelerometer\n\n\nA physical joystick using the web adapter. Support varies per browser, OS, and joystick combination.\n\n\n\n\nPhysical Joystick Controller\n\n\nThe default web controller may be replaced with a one line change to use a physical joystick part for input. This uses the OS device /dev/input/js0 by default. In theory, any joystick device that the OS mounts like this can be used. In practice, the behavior will change depending on the model of joystick ( Sony, or knockoff ), or XBox controller and the Bluetooth driver used to support it. The default code has been written and tested with a \nSony brand PS3 Sixaxis controller\n. Other controllers may work, but will require alternative Bluetooth installs, and tweaks to the software for correct axis and buttons.\n\n\nThese can be used plugged in with a USB cable - but the default code and os driver has a bug polling this configuration. It's been much more stable, and convenient, to setup Bluetooth for a wireless, responsive control.\n\n\nChange to config.py or run with --js\n\n\npython manage.py drive --js\n\n\n\n\nWill enable driving with the joystick. This disables the live preview of the camera and the web page features. If you modify config.py to make USE_JOYSTICK_AS_DEFAULT = True, then you do not need to run with the --js.\n\n\nBluetooth Setup\n\n\nFollow \nthis guide\n. You can ignore steps past the 'Accessing the SixAxis from Python' section. I will include steps here in case the link becomes stale.\n\n\nsudo apt-get install bluetooth libbluetooth3 libusb-dev\nsudo systemctl enable bluetooth.service\nsudo usermod -G bluetooth -a pi\n\n\n\n\nReboot after changing the user group.\n\n\nPlug in the PS3 with USB cable. Hit center PS logo button. Get and build the command line pairing tool. Run it:\n\n\nwget http://www.pabr.org/sixlinux/sixpair.c\ngcc -o sixpair sixpair.c -lusb\nsudo ./sixpair\n\n\n\n\nUse bluetoothctl to pair\n\n\nbluetoothctl\nagent on\ndevices\ntrust \nMAC ADDRESS\n\ndefault-agent\nquit\n\n\n\n\nUnplug USB cable. Hit center PS logo button.\n\n\nTo test that the Bluetooth PS3 remote is working, verify that /dev/input/js0 exists.\n\n\nls /dev/input/js0\n\n\n\n\nCharging PS3 Sixaxis Joystick\n\n\nFor some reason, they don't like to charge in a powered USB port that doesn't have an active Bluetooth control and OS driver. This means a phone type USB charger will not work. Try a powered Linux or mac laptop USB port. You should see the lights blink after plugging in and hitting center PS logo.\n\n\nAfter charging, you will need to plug-in the controller again to the Pi, hit the PS logo, then unplug to pair again.\n\n\nNew Battery for PS3 Sixaxis Joystick\n\n\nSometimes these controllers can be quite old. Here's a link to a \nnew battery\n. Be careful when taking off the cover. Remove 5 screws. There's a tab on the top half between the hand grips. You'll want to split/open it from the front and try pulling the bottom forward as you do, or you'll break the tab off as I did.", 
            "title": "Controllers"
        }, 
        {
            "location": "/parts/controllers/#controller-parts", 
            "text": "", 
            "title": "Controller Parts"
        }, 
        {
            "location": "/parts/controllers/#local-web-controller", 
            "text": "The default controller to drive the car with your phone or browser. This has a web live preview of camera. Control options include:   A virtual joystick  The tilt, when using a mobile device with supported accelerometer  A physical joystick using the web adapter. Support varies per browser, OS, and joystick combination.", 
            "title": "Local Web Controller"
        }, 
        {
            "location": "/parts/controllers/#physical-joystick-controller", 
            "text": "The default web controller may be replaced with a one line change to use a physical joystick part for input. This uses the OS device /dev/input/js0 by default. In theory, any joystick device that the OS mounts like this can be used. In practice, the behavior will change depending on the model of joystick ( Sony, or knockoff ), or XBox controller and the Bluetooth driver used to support it. The default code has been written and tested with a  Sony brand PS3 Sixaxis controller . Other controllers may work, but will require alternative Bluetooth installs, and tweaks to the software for correct axis and buttons.  These can be used plugged in with a USB cable - but the default code and os driver has a bug polling this configuration. It's been much more stable, and convenient, to setup Bluetooth for a wireless, responsive control.", 
            "title": "Physical Joystick Controller"
        }, 
        {
            "location": "/parts/controllers/#change-to-configpy-or-run-with-js", 
            "text": "python manage.py drive --js  Will enable driving with the joystick. This disables the live preview of the camera and the web page features. If you modify config.py to make USE_JOYSTICK_AS_DEFAULT = True, then you do not need to run with the --js.", 
            "title": "Change to config.py or run with --js"
        }, 
        {
            "location": "/parts/controllers/#bluetooth-setup", 
            "text": "Follow  this guide . You can ignore steps past the 'Accessing the SixAxis from Python' section. I will include steps here in case the link becomes stale.  sudo apt-get install bluetooth libbluetooth3 libusb-dev\nsudo systemctl enable bluetooth.service\nsudo usermod -G bluetooth -a pi  Reboot after changing the user group.  Plug in the PS3 with USB cable. Hit center PS logo button. Get and build the command line pairing tool. Run it:  wget http://www.pabr.org/sixlinux/sixpair.c\ngcc -o sixpair sixpair.c -lusb\nsudo ./sixpair  Use bluetoothctl to pair  bluetoothctl\nagent on\ndevices\ntrust  MAC ADDRESS \ndefault-agent\nquit  Unplug USB cable. Hit center PS logo button.  To test that the Bluetooth PS3 remote is working, verify that /dev/input/js0 exists.  ls /dev/input/js0", 
            "title": "Bluetooth Setup"
        }, 
        {
            "location": "/parts/controllers/#charging-ps3-sixaxis-joystick", 
            "text": "For some reason, they don't like to charge in a powered USB port that doesn't have an active Bluetooth control and OS driver. This means a phone type USB charger will not work. Try a powered Linux or mac laptop USB port. You should see the lights blink after plugging in and hitting center PS logo.  After charging, you will need to plug-in the controller again to the Pi, hit the PS logo, then unplug to pair again.", 
            "title": "Charging PS3 Sixaxis Joystick"
        }, 
        {
            "location": "/parts/controllers/#new-battery-for-ps3-sixaxis-joystick", 
            "text": "Sometimes these controllers can be quite old. Here's a link to a  new battery . Be careful when taking off the cover. Remove 5 screws. There's a tab on the top half between the hand grips. You'll want to split/open it from the front and try pulling the bottom forward as you do, or you'll break the tab off as I did.", 
            "title": "New Battery for PS3 Sixaxis Joystick"
        }, 
        {
            "location": "/parts/stores/", 
            "text": "Stores\n\n\nStores are parts that record and replay vehicle data produced by other parts. \n\n\nTub\n\n\nThis is the standard donkey data store and it is modeled after the ROSBAG.\n\n\n\n\nTODO: The structure of the Tub part is not ideal and should be changed.\n\n\n\n\ntypes should not need to be specified and could be inspected and saved \non the first loop.\n\n\n\n\n\n\nExample creation \n\n\nimport donkey as dk\n\nT = dk.parts.Tub(path, inputs, types)\n\n\n\n\n\nAccepted Types\n\n\n\n\nfloat\n - saved as record\n\n\nint\n - saved as record", 
            "title": "Stores"
        }, 
        {
            "location": "/parts/stores/#stores", 
            "text": "Stores are parts that record and replay vehicle data produced by other parts.", 
            "title": "Stores"
        }, 
        {
            "location": "/parts/stores/#tub", 
            "text": "This is the standard donkey data store and it is modeled after the ROSBAG.   TODO: The structure of the Tub part is not ideal and should be changed.   types should not need to be specified and could be inspected and saved \non the first loop.    Example creation   import donkey as dk\n\nT = dk.parts.Tub(path, inputs, types)", 
            "title": "Tub"
        }, 
        {
            "location": "/parts/stores/#accepted-types", 
            "text": "float  - saved as record  int  - saved as record", 
            "title": "Accepted Types"
        }, 
        {
            "location": "/parts/imu/", 
            "text": "IMU\n\n\nIMUs or inertial measurement units are parts that sense the inertial forces on a robot. They vary depending on sensor, but may commonly include linear and rotational accelleration. They may sometimes include magnetometer to give global compasss facing dir. Frequently temperature is available from these as it affects their sensitivity.\n\n\nMPU6050\n\n\nThis is a cheap, small, and moderately precise imu. Commonly available at \nAmazon\n.\n\n\n\n\nTypically uses the I2C interface and can be chained off the default PWM PCA9685 board. This configuration will also provide power.\n\n\nOutputs acceleration X, Y, Z, Gyroscope X, Y, Z, and temperature.\n\n\nChip built-in 16bit AD converter, 16bit data output\n\n\nGyroscopes range: +/- 250 500 1000 2000 degree/sec\n\n\nAcceleration range: \u00b12 \u00b14 \u00b18 \u00b116g\n\n\n\n\nSoftware Setup\n\n\nInstall smbus:\n\n\nfrom package:\n\n\n sudo apt install python3-smbus\n\n\n\n\nor from source:\n\n\nsudo apt-get install i2c-tools libi2c-dev python-dev python3-dev\ngit clone https://github.com/pimoroni/py-smbus.git\ncd py-smbus/library\npython setup.py build\nsudo python setup.py install\n\n\n\n\nInstall pip lib for mpu6050\n\n\npip install mpu6050-raspberrypi", 
            "title": "IMU"
        }, 
        {
            "location": "/parts/imu/#imu", 
            "text": "IMUs or inertial measurement units are parts that sense the inertial forces on a robot. They vary depending on sensor, but may commonly include linear and rotational accelleration. They may sometimes include magnetometer to give global compasss facing dir. Frequently temperature is available from these as it affects their sensitivity.", 
            "title": "IMU"
        }, 
        {
            "location": "/parts/imu/#mpu6050", 
            "text": "This is a cheap, small, and moderately precise imu. Commonly available at  Amazon .   Typically uses the I2C interface and can be chained off the default PWM PCA9685 board. This configuration will also provide power.  Outputs acceleration X, Y, Z, Gyroscope X, Y, Z, and temperature.  Chip built-in 16bit AD converter, 16bit data output  Gyroscopes range: +/- 250 500 1000 2000 degree/sec  Acceleration range: \u00b12 \u00b14 \u00b18 \u00b116g", 
            "title": "MPU6050"
        }, 
        {
            "location": "/parts/imu/#software-setup", 
            "text": "Install smbus:  from package:   sudo apt install python3-smbus  or from source:  sudo apt-get install i2c-tools libi2c-dev python-dev python3-dev\ngit clone https://github.com/pimoroni/py-smbus.git\ncd py-smbus/library\npython setup.py build\nsudo python setup.py install  Install pip lib for mpu6050  pip install mpu6050-raspberrypi", 
            "title": "Software Setup"
        }, 
        {
            "location": "/utility/donkey/", 
            "text": "Donkey Command-line Utilities\n\n\nThe \ndonkey\n command is created when you install the donkeycar Python package. This is a Python script that adds some important functionality. The operations here are vehicle independent, and should work on any hardware configuration.\n\n\nCreate Car\n\n\nThis command creates a new dir which will contain the files needed to run and train your robot.\n\n\nUsage:\n\n\ndonkey createcar --path \ndir\n [--overwrite] [--template \ndonkey2\n]\n\n\n\n\n\n\nThis command may be run from any dir\n\n\nRun on the host computer or the robot\n\n\nIt uses the \n--path\n as the destination dir to create. If \n.py\n files exist there, it will not overwrite them, unless the optional \n--overwrite\n is used. \n\n\nThe optional \n--template\n will specify the template file to start from. For a list of templates, see the \ndonkeycar/templates\n dir\n\n\n\n\nFind Car\n\n\nThis command attempts to locate your car on the local network using nmap.\n\n\nUsage:\n\n\ndonkey findcar\n\n\n\n\n\n\nRun on the host computer\n\n\nPrints the host computer IP address and the car IP address if found\n\n\nRequires the nmap utility:\n\n\n\n\nsudo apt install nmap\n\n\n\n\nCalibrate Car\n\n\nThis command allows you to manually enter values to interactively set the PWM values and experiment with how your robot responds.\nSee also \nmore information.\n\n\nUsage:\n\n\ndonkey calibrate --channel \n0-15 channel id\n\n\n\n\n\n\n\nRun on the host computer\n\n\nOpens the PWM channel specified by \n--channel\n\n\nType integer values to specify PWM values and hit enter\n\n\nHit \nCtrl + C\n to exit\n\n\n\n\nClean data in Tub\n\n\nOpens a web server to delete bad data from a tub.\n\n\nUsage:\n\n\ndonkey tubclean \nfolder containing tubs\n\n\n\n\n\n\n\nRun on pi or host computer.\n\n\nOpens the web server to delete bad data.\n\n\nHit \nCtrl + C\n to exit\n\n\n\n\nMake Movie from Tub\n\n\nThis command allows you to create a movie file from the images in a Tub.\n\n\nUsage:\n\n\ndonkey makemovie \ntub_path\n [--out=\ntub_movie.mp4\n] [--config=\nconfig.py\n]\n\n\n\n\n\n\nRun on the host computer or the robot\n\n\nUses the image records from \n--tub\n dir path given\n\n\nCreates a movie given by \n--out\n. Codec is inferred from file extension. Default: \ntub_movie.mp4\n\n\nOptional argument to specify a different \nconfig.py\n other than default: \nconfig.py\n\n\n\n\nCheck Tub\n\n\nThis command allows you to see how many records are contained in any/all tubs. It will also open each record and ensure that the data is readable and intact. If not, it will allow you to remove corrupt records.\n\n\n\n\nNote: This should be moved from manage.py to donkey command\n\n\n\n\nUsage:\n\n\ndonkey tubcheck \ntub_path\n [--fix]\n\n\n\n\n\n\nRun on the host computer or the robot\n\n\nIt will print summary of record count and channels recorded for each tub\n\n\nIt will print the records that throw an exception while reading\n\n\nThe optional \n--fix\n will delete records that have problems\n\n\n\n\nHistogram\n\n\nThis command will show a pop-up window showing the histogram of record values in a given tub.\n\n\n\n\nNote: This should be moved from manage.py to donkey command\n\n\n\n\nUsage:\n\n\ndonkey tubhist \ntub_path\n --rec=\nuser/angle\n\n\n\n\n\n\n\n\n\nRun on the host computer\n\n\n\n\n\n\nWhen the \n--tub\n is omitted, it will check all tubs in the default data dir\n\n\n\n\n\n\nPlot Predictions\n\n\nThis command allows you plot steering and throttle against predictions coming from a trained model.\n\n\n\n\nNote: This should be moved from manage.py to donkey command\n\n\n\n\nUsage:\n\n\ndonkey tubplot \ntub_path\n [--model=\nmodel_path\n]\n\n\n\n\n\n\nThis command may be run from \n~/d2\n dir\n\n\nRun on the host computer\n\n\nWill show a pop-up window showing the plot of steering values in a given tub compared to NN predictions from the trained model\n\n\nWhen the \n--tub\n is omitted, it will check all tubs in the default data dir\n\n\n\n\nSimulation Server\n\n\nThis command allows you serve steering and throttle controls to a simulated vehicle using the \nDonkey Simulator\n.\n\n\nUsage:\n\n\ndonkey sim --model=\nmodel_path\n [--type=\nlinear|categorical\n] [--top_speed=\nspeed\n] [--config=\nconfig.py\n]\n\n\n\n\n\n\nThis command may be run from \n~/d2\n dir\n\n\nRun on the host computer\n\n\nUses the model to make predictions based on images and telemetry from the simulator\n\n\n--type\n can specify whether the model needs angle output to be treated as categorical\n\n\nTop speed can be modified to ascertain stability at different goal speeds", 
            "title": "donkey"
        }, 
        {
            "location": "/utility/donkey/#donkey-command-line-utilities", 
            "text": "The  donkey  command is created when you install the donkeycar Python package. This is a Python script that adds some important functionality. The operations here are vehicle independent, and should work on any hardware configuration.", 
            "title": "Donkey Command-line Utilities"
        }, 
        {
            "location": "/utility/donkey/#create-car", 
            "text": "This command creates a new dir which will contain the files needed to run and train your robot.  Usage:  donkey createcar --path  dir  [--overwrite] [--template  donkey2 ]   This command may be run from any dir  Run on the host computer or the robot  It uses the  --path  as the destination dir to create. If  .py  files exist there, it will not overwrite them, unless the optional  --overwrite  is used.   The optional  --template  will specify the template file to start from. For a list of templates, see the  donkeycar/templates  dir", 
            "title": "Create Car"
        }, 
        {
            "location": "/utility/donkey/#find-car", 
            "text": "This command attempts to locate your car on the local network using nmap.  Usage:  donkey findcar   Run on the host computer  Prints the host computer IP address and the car IP address if found  Requires the nmap utility:   sudo apt install nmap", 
            "title": "Find Car"
        }, 
        {
            "location": "/utility/donkey/#calibrate-car", 
            "text": "This command allows you to manually enter values to interactively set the PWM values and experiment with how your robot responds.\nSee also  more information.  Usage:  donkey calibrate --channel  0-15 channel id    Run on the host computer  Opens the PWM channel specified by  --channel  Type integer values to specify PWM values and hit enter  Hit  Ctrl + C  to exit", 
            "title": "Calibrate Car"
        }, 
        {
            "location": "/utility/donkey/#clean-data-in-tub", 
            "text": "Opens a web server to delete bad data from a tub.  Usage:  donkey tubclean  folder containing tubs    Run on pi or host computer.  Opens the web server to delete bad data.  Hit  Ctrl + C  to exit", 
            "title": "Clean data in Tub"
        }, 
        {
            "location": "/utility/donkey/#make-movie-from-tub", 
            "text": "This command allows you to create a movie file from the images in a Tub.  Usage:  donkey makemovie  tub_path  [--out= tub_movie.mp4 ] [--config= config.py ]   Run on the host computer or the robot  Uses the image records from  --tub  dir path given  Creates a movie given by  --out . Codec is inferred from file extension. Default:  tub_movie.mp4  Optional argument to specify a different  config.py  other than default:  config.py", 
            "title": "Make Movie from Tub"
        }, 
        {
            "location": "/utility/donkey/#check-tub", 
            "text": "This command allows you to see how many records are contained in any/all tubs. It will also open each record and ensure that the data is readable and intact. If not, it will allow you to remove corrupt records.   Note: This should be moved from manage.py to donkey command   Usage:  donkey tubcheck  tub_path  [--fix]   Run on the host computer or the robot  It will print summary of record count and channels recorded for each tub  It will print the records that throw an exception while reading  The optional  --fix  will delete records that have problems", 
            "title": "Check Tub"
        }, 
        {
            "location": "/utility/donkey/#histogram", 
            "text": "This command will show a pop-up window showing the histogram of record values in a given tub.   Note: This should be moved from manage.py to donkey command   Usage:  donkey tubhist  tub_path  --rec= user/angle     Run on the host computer    When the  --tub  is omitted, it will check all tubs in the default data dir", 
            "title": "Histogram"
        }, 
        {
            "location": "/utility/donkey/#plot-predictions", 
            "text": "This command allows you plot steering and throttle against predictions coming from a trained model.   Note: This should be moved from manage.py to donkey command   Usage:  donkey tubplot  tub_path  [--model= model_path ]   This command may be run from  ~/d2  dir  Run on the host computer  Will show a pop-up window showing the plot of steering values in a given tub compared to NN predictions from the trained model  When the  --tub  is omitted, it will check all tubs in the default data dir", 
            "title": "Plot Predictions"
        }, 
        {
            "location": "/utility/donkey/#simulation-server", 
            "text": "This command allows you serve steering and throttle controls to a simulated vehicle using the  Donkey Simulator .  Usage:  donkey sim --model= model_path  [--type= linear|categorical ] [--top_speed= speed ] [--config= config.py ]   This command may be run from  ~/d2  dir  Run on the host computer  Uses the model to make predictions based on images and telemetry from the simulator  --type  can specify whether the model needs angle output to be treated as categorical  Top speed can be modified to ascertain stability at different goal speeds", 
            "title": "Simulation Server"
        }, 
        {
            "location": "/contribute/", 
            "text": "Contribute to Donkey\n\n\nDonkey is an open source project to help accelerate the development of \nself driving autos. \n\n\nGuiding Development Principles\n\n\n\n\nModularity\n: A self driving system is composed of standalone, \nindependently configurable components that can be combined to make a car.\n\n\nMinimalism\n: Each component should be kept short (\n100 lines of code). \nEach piece of code should be transparent upon first reading. No black magic, \nit slows the speed of innovation. \n\n\nExtensibility\n: New components should be simple to create by following a \ntemplate. \n\n\nPython\n: Keep it simple. \n\n\n\n\nThese guidelines are nearly copied from \nKeras\n because they are so good\n \n\n\nAdd a part.\n\n\nAre you a hardware specialist that can write a donkey part wrapper for a\nGPS unit or a data scientist that can write an recursive neural net autopilot?\nIf so please write a part so other people driving donkeys can use the part.\n\n\nFix or report a bug.\n\n\nIf you find a problem with the code and you know how to fix it then please\nclone the repo, make your fix, and submit your pull request.\n\n\nReply to issues.\n\n\nHelping close or triage the issues is a good way to help.\n\n\nNeed Inspiration?\n\n\nSearch the code or docs for \nTODO\n to find places where you might be able \nto find a better solution. \n\n\nImprove the documentation.\n\n\nYou can fix grammar or provide clarity by clicking the the \nEdit on GitHub\n \nlink in the top right corner.", 
            "title": "Contribute"
        }, 
        {
            "location": "/contribute/#contribute-to-donkey", 
            "text": "Donkey is an open source project to help accelerate the development of \nself driving autos.", 
            "title": "Contribute to Donkey"
        }, 
        {
            "location": "/contribute/#guiding-development-principles", 
            "text": "Modularity : A self driving system is composed of standalone, \nindependently configurable components that can be combined to make a car.  Minimalism : Each component should be kept short ( 100 lines of code). \nEach piece of code should be transparent upon first reading. No black magic, \nit slows the speed of innovation.   Extensibility : New components should be simple to create by following a \ntemplate.   Python : Keep it simple.    These guidelines are nearly copied from  Keras  because they are so good", 
            "title": "Guiding Development Principles"
        }, 
        {
            "location": "/contribute/#add-a-part", 
            "text": "Are you a hardware specialist that can write a donkey part wrapper for a\nGPS unit or a data scientist that can write an recursive neural net autopilot?\nIf so please write a part so other people driving donkeys can use the part.", 
            "title": "Add a part."
        }, 
        {
            "location": "/contribute/#fix-or-report-a-bug", 
            "text": "If you find a problem with the code and you know how to fix it then please\nclone the repo, make your fix, and submit your pull request.", 
            "title": "Fix or report a bug."
        }, 
        {
            "location": "/contribute/#reply-to-issues", 
            "text": "Helping close or triage the issues is a good way to help.", 
            "title": "Reply to issues."
        }, 
        {
            "location": "/contribute/#need-inspiration", 
            "text": "Search the code or docs for  TODO  to find places where you might be able \nto find a better solution.", 
            "title": "Need Inspiration?"
        }, 
        {
            "location": "/contribute/#improve-the-documentation", 
            "text": "You can fix grammar or provide clarity by clicking the the  Edit on GitHub  \nlink in the top right corner.", 
            "title": "Improve the documentation."
        }, 
        {
            "location": "/tests/", 
            "text": "Tests\n\n\nThere is a limited test suite to ensure that the your changes to the code\ndon't break something unintended. \n\n\nRun all the tests\n\n\npython -m unittest\n\n\nOrganization\n\n\nThe test code is in \ntests\n foders in the same folder as the code. This is to\nhelp keep the test code linked to the code its self. If you change the code, \nchange the tests. :)\n\n\n\n\nTODO: Skip tests that require specific hardware.", 
            "title": "Tests"
        }, 
        {
            "location": "/tests/#tests", 
            "text": "There is a limited test suite to ensure that the your changes to the code\ndon't break something unintended.", 
            "title": "Tests"
        }, 
        {
            "location": "/tests/#run-all-the-tests", 
            "text": "python -m unittest", 
            "title": "Run all the tests"
        }, 
        {
            "location": "/tests/#organization", 
            "text": "The test code is in  tests  foders in the same folder as the code. This is to\nhelp keep the test code linked to the code its self. If you change the code, \nchange the tests. :)   TODO: Skip tests that require specific hardware.", 
            "title": "Organization"
        }, 
        {
            "location": "/release/", 
            "text": "Release notes\n\n\nNotes to remember how to release donkey.\n\n\nCreate a startup disk.\n\n\nThe general steps of creating a startup disk are. \n1. Make the disk perfect.\n2. Create startup disk.\n3. Publish image and update docs. \n\n\nOnce the SD card is ready and tested take it out of the Pi and into your \ncomputer. Run \nsudo gparted\n to see the size of the disk partitions. Then resize\nthe partitions to be as small as possible. Right click the partition and\nsee the last sector of the partition. \n\n\nThen run\n\n\ndd -if /def/sdb -of /\n\n\nCreate a release\n\n\nUpdate \nsetup.py\n\n1. update the version in set", 
            "title": "Releases"
        }, 
        {
            "location": "/release/#release-notes", 
            "text": "Notes to remember how to release donkey.", 
            "title": "Release notes"
        }, 
        {
            "location": "/release/#create-a-startup-disk", 
            "text": "The general steps of creating a startup disk are. \n1. Make the disk perfect.\n2. Create startup disk.\n3. Publish image and update docs.   Once the SD card is ready and tested take it out of the Pi and into your \ncomputer. Run  sudo gparted  to see the size of the disk partitions. Then resize\nthe partitions to be as small as possible. Right click the partition and\nsee the last sector of the partition.   Then run  dd -if /def/sdb -of /", 
            "title": "Create a startup disk."
        }, 
        {
            "location": "/release/#create-a-release", 
            "text": "Update  setup.py \n1. update the version in set", 
            "title": "Create a release"
        }, 
        {
            "location": "/faq/", 
            "text": "FAQ\n\n\n\n\nHow do I create my own Raspberry Pi Disk?\n\n\nThis uses minimal space on your memory card, is easy to upgrade and make changes to source\n\n\n\n\nDownload raspian lite\n\n\nOn Windows, \ndownload disk imager\n\n\nOn Mac or Linux, \ndownload Etcher\n\n\nFollow instructions to burn image to memory card.:\n\n\nWin32DiskImager \nvideo\n \n\n\nWin32DiskImager \nwriteup\n\n\nEtcher \nvideo\n\n\nEtcher \nwriteup\n\n\nMultiple methods \nwriteup\n\n\n\n\n\n\n\n\nPlace memory card in Pi and boot\n\n\n\n\n\n\nAfter booting, you will see a prompt. Login. type \npi\n for username.\n\n\n\n\n\n\nType \nraspberry\n for password.\n\n\n\n\n\n\nUse raspi-config to setup some useful options:\n    \nsudo raspi-config\n\n\n\n\nchange hostname\n\n\nchange password\n\n\ninterface options: \n\n\nenable camera\n\n\nenable SSH\n\n\nenable I2C\n\n\n\n\n\n\n\n\n\n\n\n\nReboot.\n\n\n\n\n\n\nDo a package refresh and get latest:\n\n\n\n\n\n\nsudo apt-get update\nsudo apt-get upgrade\n\n\n\n\n\n\nInstall packages:\n\n\n\n\nsudo apt-get install git\nsudo apt-get install python3 python3-pip python3-virtualenv python3-dev virtualenv\nsudo apt-get install build-essential gfortran libhdf5-dev\n\n\n\n\n\n\nGet latest donkey code:\n\n\n\n\ngit clone https://github.com/wroscoe/donkey\ncd donkey\n\n\n\n\n\n\nInstall anaconda:\n\n\n\n\nwget http://repo.continuum.io/miniconda/Miniconda3-latest-Linux-armv7l.sh\nbash Miniconda3-latest-Linux-armv7l.sh\nsource ~/.bashrc\n\n\n\n\n\n\nSetup python environment\n\n\n\n\nconda env create -f envs/rpi.yml\nsource activate donkey\n\n\n\n\n\n\nUpgrade numpy. This can take a long time as it involves compiling the latest.\n\n\n\n\npip install --upgrade numpy\n\n\n\n\n\n\nSetup tensorflow:\n\n\n\n\nwget https://github.com/samjabrahams/tensorflow-on-raspberry-pi/releases/download/v1.1.0/tensorflow-1.1.0-cp34-cp34m-linux_armv7l.whl\npip install tensorflow-1.1.0-cp34-cp34m-linux_armv7l.whl\n\n\n\n\n\n\nSetup donkey\n\n\n\n\npip install -e .\n\n\n\n\n\n\nSetup initial files and dir for data. Refer to \nGet Driving\n for options.\n\n\n\n\n\n\nAfter a reboot, I don't see the (donkey) in front of the prompt, and I get python errors when I run.\n\n\n\n\nIf you used this disc setup guide above, you used conda to manage your virtual environment. You need to activate the donkey conda environment with:\n    \nsource activate donkey\n\n\noptionally you can add that line to the last line of your ~/.bashrc to have it active each time you login.\n\n\n\n\n\n\nHow to get latest Donkey source\n\n\n\n\n\n\nWhen donkey has changed you can get the latest source. You've installed it directly from the github repo, so getting latest is easy:\n     \ncd donkey\n    git pull origin master\n\n\n\n\n\n\nOccasionally also the template files have changed with fixes that affect manage.py. You can create a new user directory to test. Use the same options you used to create it \nfrom setup instructions\n but a new path. For instance:\n    \ndonkey createcar --path ~/d2_new", 
            "title": "FAQ"
        }, 
        {
            "location": "/faq/#faq", 
            "text": "", 
            "title": "FAQ"
        }, 
        {
            "location": "/faq/#how-do-i-create-my-own-raspberry-pi-disk", 
            "text": "", 
            "title": "How do I create my own Raspberry Pi Disk?"
        }, 
        {
            "location": "/faq/#this-uses-minimal-space-on-your-memory-card-is-easy-to-upgrade-and-make-changes-to-source", 
            "text": "Download raspian lite  On Windows,  download disk imager  On Mac or Linux,  download Etcher  Follow instructions to burn image to memory card.:  Win32DiskImager  video    Win32DiskImager  writeup  Etcher  video  Etcher  writeup  Multiple methods  writeup     Place memory card in Pi and boot    After booting, you will see a prompt. Login. type  pi  for username.    Type  raspberry  for password.    Use raspi-config to setup some useful options:\n     sudo raspi-config   change hostname  change password  interface options:   enable camera  enable SSH  enable I2C       Reboot.    Do a package refresh and get latest:    sudo apt-get update\nsudo apt-get upgrade   Install packages:   sudo apt-get install git\nsudo apt-get install python3 python3-pip python3-virtualenv python3-dev virtualenv\nsudo apt-get install build-essential gfortran libhdf5-dev   Get latest donkey code:   git clone https://github.com/wroscoe/donkey\ncd donkey   Install anaconda:   wget http://repo.continuum.io/miniconda/Miniconda3-latest-Linux-armv7l.sh\nbash Miniconda3-latest-Linux-armv7l.sh\nsource ~/.bashrc   Setup python environment   conda env create -f envs/rpi.yml\nsource activate donkey   Upgrade numpy. This can take a long time as it involves compiling the latest.   pip install --upgrade numpy   Setup tensorflow:   wget https://github.com/samjabrahams/tensorflow-on-raspberry-pi/releases/download/v1.1.0/tensorflow-1.1.0-cp34-cp34m-linux_armv7l.whl\npip install tensorflow-1.1.0-cp34-cp34m-linux_armv7l.whl   Setup donkey   pip install -e .   Setup initial files and dir for data. Refer to  Get Driving  for options.", 
            "title": "This uses minimal space on your memory card, is easy to upgrade and make changes to source"
        }, 
        {
            "location": "/faq/#after-a-reboot-i-dont-see-the-donkey-in-front-of-the-prompt-and-i-get-python-errors-when-i-run", 
            "text": "If you used this disc setup guide above, you used conda to manage your virtual environment. You need to activate the donkey conda environment with:\n     source activate donkey  optionally you can add that line to the last line of your ~/.bashrc to have it active each time you login.", 
            "title": "After a reboot, I don't see the (donkey) in front of the prompt, and I get python errors when I run."
        }, 
        {
            "location": "/faq/#how-to-get-latest-donkey-source", 
            "text": "When donkey has changed you can get the latest source. You've installed it directly from the github repo, so getting latest is easy:\n      cd donkey\n    git pull origin master    Occasionally also the template files have changed with fixes that affect manage.py. You can create a new user directory to test. Use the same options you used to create it  from setup instructions  but a new path. For instance:\n     donkey createcar --path ~/d2_new", 
            "title": "How to get latest Donkey source"
        }
    ]
}